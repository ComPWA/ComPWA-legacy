language: cpp
os: linux
dist: xenial

branches:
  only:
    - master
    - /\d+\.\d+.*/
  except: gh-pages

env:
  global:
    - GH_REPO_NAME: ComPWA
    - GH_REPO_REF: github.com/ComPWA/ComPWA.git
    - OMP_NUM_THREADS: 1
    - LANG: en_US.UTF-8
    - BASEPATH: $TRAVIS_BUILD_DIR
    - ROOTSYS: $BASEPATH/root
      # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
      # via the "travis encrypt" command using the project repo's public key
    - secure: "I1LwO65P4q89f31HYnFlrlJ9yHyJ/QIAOXR5CtPfMo5FnestBtlQg6fX3p1vLNi5XdYXP4QpP51FFGJ5suz1aigC45JRaMzO98WQmMvIqYufrhkYej6lNevL0z/tHeI0aURH7N1SfSZaLwkepErssOsdjJAqP538ldA3Zz9g2gM="
    - CODECOV_TOKEN: "2cf5be81-a194-49a5-a8ab-49123b181e2c"

addons:
  apt:
    update: true
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-8
    packages:
      - gcc-7
      - g++-7
      - libboost-all-dev

install:
  - cd $BASEPATH
  - cmake --version
  - wget https://root.cern.ch/download/root_${ROOTBIN}.tar.gz
  - tar xpvfz root_*.tar.gz > /dev/null 2>&1
  - source root/bin/thisroot.sh

script:
  - mkdir $BASEPATH/build
  - cd $BASEPATH/build
  - cmake -DCMAKE_INSTALL_PREFIX=$BASEPATH/../install $BASEPATH
  - cmake --build . --target install -- -j2
  - ctest -j2 --output-on-failure

jobs:
  include:
    - name: gcc5, ROOT v6.16 + coverity scan
      os: linux
      if: type != pull_request
      dist: xenial
      compiler: gcc
      env:
        - ROOTBIN="v6.16.00.Linux-ubuntu16-x86_64-gcc5.4"
      before_install:
        # For some reason we have because travisCI
        # does not execute the APT plugin for this instance.
        - sudo apt-get update && sudo apt-get install -y libboost-all-dev
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-;
      addons:
        coverity_scan:
          project:
            name: "ComPWA/ComPWA"
            description: "Build submitted via Travis CI"
          notification_email: peter.weidenkaff@mailbox.org
          build_command_prepend: "mkdir $BASEPATH/build-coverity; cd $BASEPATH/build-coverity; cmake -DCMAKE_BUILD_TYPE=Debug $BASEPATH;"
          build_command: "cmake --build . -- -j 2"
          branch_pattern: master
      script: True

    - name: Build documentation (Doxygen + Sphinx)
      os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - doxygen
            - doxygen-doc
            - doxygen-gui
            - doxygen-latex
            - graphviz
            - python3
            - python3-pip
      install:
        - python3 -m pip install --upgrade pip
        - python3 -m pip install setuptools
        - python3 -m pip install -r $BASEPATH/doc/requirements.txt
      script:
        - cd $BASEPATH/doc
        - doxygen
        - make html
      before_deploy:
        - cd $BASEPATH
        - touch doc/doxyoutput/html/.nojekyll # for GitHub Pages
        - openssl aes-256-cbc -K $encrypted_b276c14399d1_key -iv $encrypted_b276c14399d1_iv -in github_deploy_key.enc -out github_deploy_key -d
      deploy:
        strategy: git
        provider: pages
        keep_history: true
        deploy_key: github_deploy_key
        cleanup: false
        edge: true
        repo: ComPWA/ComPWA
        target_branch: gh-pages
        local_dir: "$BASEPATH/doc/doxyoutput/html"
        verbose: true
        on:
          branch: master

    - name: clang, ROOT v6.18
      os: osx
      osx_image: xcode10.2
      env:
        - ROOTBIN="v6.18.04.macosx64-10.14-clang100"
      addons:
        homebrew:
          update: false
          packages:
            - boost
      script:
        - mkdir $BASEPATH/build
        - cd $BASEPATH/build
        - cmake -DCMAKE_INSTALL_PREFIX=$BASEPATH/../install $BASEPATH
        - cmake --build . -- -j 2
        # Do not run tests for osx since it will fail. The reason is that
        # the precompiled ROOT libraries do not have RPATH set properly.
        - make install

    - name: gcc7, ROOT v6.16
      os: linux
      dist: xenial
      compiler: gcc
      env:
        - CC=gcc-7
        - CXX=g++-7
        - ROOTBIN="v6.16.00.Linux-ubuntu16-x86_64-gcc5.4"

    - name: gcc5, ROOT v6.16 + code coverage
      os: linux
      dist: xenial
      compiler: gcc # Xenial: gcc-5.4
      env:
        - ROOTBIN="v6.16.00.Linux-ubuntu16-x86_64-gcc5.4"
      addons:
        apt:
          packages:
            - libboost-all-dev # Version 1.58 for xenial
            - lcov
      script:
        - mkdir $BASEPATH/build
        - cd $BASEPATH/build
        - cmake -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$BASEPATH/../install $BASEPATH
        - cmake --build . -- -j 2
        - ctest -j 2 --output-on-failure
        - make install
      after_success:
        - if [ -f "$BASEPATH/build-coverity/cov-int/scm_log.txt" ]; then
          cat $BASEPATH/build-coverity/cov-int/scm_log.txt
          fi # Print coverity log if exists
        - cd $BASEPATH
        # Create lcov report
        - lcov --capture --directory . --output-file $BASEPATH/coverage.info
        # ignore certain files
        - lcov --remove $BASEPATH/coverage.info '/usr/*' '*/test/*' '*/ThirdParty/*' '*/root/include/*' --output-file $BASEPATH/coverage-filtered.info # filter system-files
        - lcov --list $BASEPATH/coverage-filtered.info # debug info
        # Uploading report to CodeCov
        - bash <(curl -s https://codecov.io/bash) -f $BASEPATH/coverage-filtered.info || echo "Codecov did not collect coverage reports"

    - name: clang7, ROOT v6.16
      os: linux
      dist: xenial
      compiler: clang
      env:
        - ROOTBIN="v6.16.00.Linux-ubuntu16-x86_64-gcc5.4"

    - name: clang7, ROOT v6.16, DEBUG mode
      os: linux
      dist: xenial
      compiler: clang
      env:
        - ROOTBIN="v6.16.00.Linux-ubuntu16-x86_64-gcc5.4"
      script:
        - mkdir $BASEPATH/build
        - cd $BASEPATH/build
        - cmake -DCMAKE_BUILD_TYPE=Debug $BASEPATH
        - cmake --build . -- -j 2
